# -*- coding: utf-8 -*-
import os
from time import sleep
import datetime
import re
import random
import json

import requests
from pprint import pprint
import vk_tokens as vk

# –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞

where_i = os.popen('hostname').read()
where_i.encode('utf-8')

print(where_i)


if 'hostland' in where_i:
    
    # –ø—É—Ç—å –∫ —Ä–∞–±–æ—á–µ–π –ø–∞–ø–∫–µ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ
    path_folder = '/home/host1336571/parser-yo.ga/htdocs/www/yoga/bot/bday_vk/'

else:

    # –ø—É—Ç—å –∫ —Ä–∞–±–æ—á–µ–π –ø–∞–ø–∫–µ –Ω–∞ –ª–æ–∫–∞–ª–∫–µ
    path_folder = '/home/mint/projects/birthday_members_vk/'
    
print(path_folder)


# –∏–º–ø–æ—Ä—Ç —Ç–æ–∫–µ–Ω–æ–≤ vk
token = vk.token
g_id = vk.g_id
g_id_post = vk.g_id_post
V = vk.V

# —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç —Å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ–º
def del_last_post(): 
    post_id = json.load(open(path_folder + 'last_post_id.json'))
    print(post_id)
    #post_id = json.load(open('last_post_id.json'))
    r = requests.get('https://api.vk.com/method/wall.delete',
                                    params={'access_token': token,
                                    'v': V,
                                    'owner_id': g_id_post,
                                    'post_id': post_id,})

    data = r.json()
    print('—É–¥–∞–ª–µ–Ω–∏–µ', data)
    get_members()

 # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
def get_members():
    offset = 0
    all_users = []
    while True:
        # —Å–ø–∏–º –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã vk –Ω–µ –∑–∞–±–∞–Ω–∏–ª
        sleep(1)
        r = requests.get('https://api.vk.com/method/groups.getMembers',
                                    params={'access_token': token,
                                    'v': V,
                                    'group_id': g_id,
                                    'offset': offset,
                                    'fields': 'bdate',
                                    'count': 1000})
        data = r.json()
        count_users = data['response']['count']
        users = data['response']['items']
        all_users.extend(users)
        offset += 1000
        count_all_users = len(all_users)
        print('–°–æ–±—Ä–∞–Ω–æ', count_all_users)

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å—Ç—É—Ç—Å—Ç–≤–∏–µ –¥—É–±–ª–µ–π
        if count_all_users >= count_users:
            perebor = count_all_users - count_users
            print('–ø–µ—Ä–µ–±–æ—Ä:', perebor)
            search_bday(all_users)
            break

 # –∏—â–µ–º –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
def search_bday(all_users):

    users_bday = []

    # —É–∑–Ω–∞—ë–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    current_datetime = datetime.datetime.now()
    day_today = current_datetime.day
    month_today = str(current_datetime.month)

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ –∏–∑ –¥–∞—Ç—ã
    str_date = fr"('{day_today}.{month_today})"

    for u in all_users:
        u_values = str(u.values())
        result = re.search(str_date, u_values) # –∏—â–µ–º
        if result != None:
            users_bday.append(u.values())
    pprint(users_bday)
    count_bday = len(users_bday)
    print('–ù–∞–π–¥–µ–Ω–æ', count_bday, '–∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤')
    create_message(users_bday, count_bday) # –µ—Å–ª–∏ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∏ –µ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è


# —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π 
def create_message(users_bday, count_bday):
    list_bday = []
    n = 0
    for u in users_bday:
        user_bday = users_bday[n]
        n += 1
        user_bday = list(u)

        bday_in_list = f'''@id{user_bday[1]} ({user_bday[0]} {user_bday[2]})'''
        list_bday.append(bday_in_list)
        if n == count_bday:
            break
    vstuplenie = ['üí• –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –Ω–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! üí•', 'üî• –°–µ–≥–æ–¥–Ω—è —Å—Ä–µ–¥–∏ –Ω–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –µ—Å—Ç—å –∏–º–µ–Ω–Ω–∏–Ω–∏–∫–∏ üî•',
 '–°–ø–µ—à–∏–º –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ üíé', 'üíé –í —ç—Ç–æ—Ç –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π –¥–µ–Ω—å, —Ö–æ—Ç–∏–º –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å –í–∞—Å, –Ω–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ üíé',
 '–ê –í—ã –∑–Ω–∞–ª–∏ –∫–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å? –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤! üî•',
 'üí• –°–µ–≥–æ–¥–Ω—è –±—É–¥–µ–º –ø–æ—Ç—á–∏–≤–∞—Ç—å –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ üí•', '–°–µ–≥–æ–¥–Ω—è —á–µ—Å—Ç–≤—É–µ–º –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø—ã üíé', 'üéÅ –ò —Å–Ω–æ–≤–∞ —Ä–∞–¥–æ—Å—Ç—å –∏ –ø–æ–¥–∞—Ä–∫–∏ –ø–æ—Å–µ—Ç—è—Ç –¥–æ–º–∞ –Ω–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —É –∫–æ—Ç–æ—Ä—ã—Ö —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è üéÅ']
    vstuplenie = random.choice(vstuplenie)

    procvetanie = ['–ø—Ä–æ—Ü–≤–µ—Ç–∞–Ω–∏—è', '–Ω–∞—É—á–∏—Ç—å—Å—è —á–µ–º—É-—Ç–æ –Ω–æ–≤–æ–º—É', '–±—ã—Ç—å –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏', '–ø–æ–≤—ã—Å–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é']
    procvetanie = random.choice(procvetanie)
    cash = ['–±–æ–≥–∞—Ç—Å—Ç–≤–∞', '–¥–æ—Ä–æ–≥—É—é –º–∞—à–∏–Ω—É', '–ø—Ä–∏–±–∞–≤–∫–∏ –∂–∏–ª–æ–π –ø–ª–æ—â–∞–¥–∏', '—Å–≤–æ–π —Å–∞–º–æ–ª—ë—Ç', '—Å–≤–æ—é —è—Ö—Ç—É', '—Å–≤–æ–π –≤–µ—Ä—Ç–æ–ª—ë—Ç', '–¥–æ–º –Ω–∞ –ú–∞–ª—å–¥–∏–≤–∞—Ö']
    cash = random.choice(cash)
    love = ['–º–Ω–æ–≥–æ —Å—á–∞—Å—Ç—å—è üíñ', '–º–Ω–æ–≥–æ –ª—é–±–≤–∏ ‚ù§', '—á—Ç–æ–±—ã –≤—Å–µ –≤–∞—à–∏ –±–ª–∏–∑–∫–∏–µ –±—ã–ª–∏ –∑–¥–æ—Ä–æ–≤—ã ü§∏', '–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≥—Ä—É—Å—Ç–∏—Ç—å ‚òÄ', '–º–Ω–æ–≥–æ –¥–æ–±—Ä–∞ üòÄ']
    love = random.choice(love)
    triger = ['–ü—É—Å—Ç—å –í–∞—à –¥–µ–Ω—å –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω —Ä–∞–¥–æ—Å—Ç—å—é üòÄ', '–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è. –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ —ç—Ç–æ –∫ –Ω–∞–º üòÄ',
    '–ê –ø—Ä–∏ –∑–∞–∫–∞–∑–µ —É –Ω–∞—Å –ø–æ–¥–∞—Ä–∫–∞ –¥–ª—è –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞, —Å–¥–µ–ª–∞–µ–º —Å–∫–∏–¥–∫—É 15%!', '–î–∞—Ä–∏–º –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞–º —Å–∫–∏–¥–∫—É 10% –Ω–∞ –≤—Å—ë –≤ —Ç–µ—á–µ–Ω–∏–∏ 3 –¥–Ω–µ–π!', '–°–µ–≥–æ–¥–Ω—è –≤–∫–ª—é—á–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—É—é —Å–∫–∏–¥–∫—É 10% –ø–æ –∫–æ–¥–æ–≤–æ–π —Ñ—Ä–∞–∑–µ –Ø –ö –í–ê–ú –°–û –î–ù–Ø –†–û–ñ–î–ï–ù–ò–Ø. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –Ω–∞—à —á–∞—Ç.']
    triger = random.choice(triger)
    text = f'''{vstuplenie}
 {(', '.join(list_bday))}.
  –ñ–µ–ª–∞–µ–º –í–∞–º {procvetanie}, {cash} –∏ {love}

  {triger}'''
    print(text)
    send_post(list_bday, text)


# —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ –≤ –ª–µ–Ω—Ç—É —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ vk
def send_post(list_bday, text):
    
    r = requests.get('https://api.vk.com/method/photos.getWallUploadServer',
                 params={'access_token': token, 'v': V, 'group_id': g_id})
    data = r.json()
    
    
    random_img = [path_folder + 'bday_image/image2.jpg', path_folder + 'bday_image/image3.jpg', path_folder + 'bday_image/image4.jpg',
                  path_folder + 'bday_image/image0.jpg', path_folder + 'bday_image/image1.jpg']
    random_img = random.choice(random_img)
    
    server = requests.post(data['response']['upload_url'], files={'photo': open(random_img, "rb")})
    ser = server.json()
    
    
    load = requests.get('https://api.vk.com/method/photos.saveWallPhoto',
                        params={'access_token': token,
                                'v': V,
                                'group_id': g_id,
                                'server': ser['server'],
                                'photo': ser['photo'],
                                'hash': ser['hash']})
    
    save = load.json()
    
    # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–æ—Ç–æ
    photo_id = (f'''photo{save['response'][0]['owner_id']}_{save['response'][0]['id']}''')

    
    # –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –≤—Å–µ–≥–æ, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    #print(f'''url error: https://api.vk.com/method/wall.post + —Ç–æ–∫–µ–Ω: {token} + –≤–µ—Ä—Å–∏—è api: {V} + id –≥—Ä—É–ø–ø—ã: {g_id_post} + —Ç–µ–∫—Å—Ç: {text} + id —Ñ–æ—Ç–æ: {photo_id}''')
    
    
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞
    post = requests.post('https://api.vk.com/method/wall.post',
                        params={'access_token': token, 'v': V, 'from_group': 1, 'owner_id': g_id_post, 'message': text,
                                'attachments': photo_id})
    
    post_id = post.json()
    print(post.content)
    
    save_post_id(post_id)

def save_post_id(post_id):
    print('–ø–æ—Å—Ç –∞–π–¥–∏', post_id)
    post_id = post_id['response']['post_id']

    with open(path_folder + 'last_post_id.json', 'w') as f:
    #with open('last_post_id.json', 'w') as f:
        json.dump(post_id, f, indent=2)
        pass


del_last_post()